const express = require("express");
const sgMail = require("@sendgrid/mail");

const router = express.Router();

/* ---------------------------------------------------
 ‚úÖ SendGrid setup
--------------------------------------------------- */
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

async function sendEmail(to, subject, html) {
  const msg = {
    to,
    from: process.env.SENDGRID_FROM, // MUST be verified in SendGrid
    subject,
    html,
  };

  try {
    const [response] = await sgMail.send(msg);
    console.log(`üìß Feedback email sent to ${to}`);
    console.log(`Status Code: ${response.statusCode}`);
  } catch (err) {
    console.error("‚ùå SendGrid feedback email error:", err);
  }
}

/* ---------------------------------------------------
 üìå SEND FEEDBACK EMAIL
--------------------------------------------------- */
router.post("/send-feedback", async (req, res) => {
  try {
    const {
      clientName,
      emailAddress,
      contactNo,
      transactionDate,
      transactionTime,
      employeeName,
      serviceAvailed,
      ratings,
      comments,
    } = req.body;

    // üß± Build formatted HTML for ratings
    let ratingsHtml = "";
    for (const section in ratings) {
      ratingsHtml += `
        <h4 style="color:#144C22;">${section}</h4>
        <table border="1" cellspacing="0" cellpadding="6" style="border-collapse:collapse;width:100%;font-size:13px;">
          <thead style="background-color:#f3f3f3;">
            <tr>
              <th align="left">Criteria</th>
              <th align="center">Rating</th>
            </tr>
          </thead>
          <tbody>
            ${ratings[section]
              .map(
                (item) => `
              <tr>
                <td>${item.criteria}</td>
                <td align="center">${item.rating}</td>
              </tr>`
              )
              .join("")}
          </tbody>
        </table><br/>
      `;
    }

    // üì® Build email content
    const htmlContent = `
      <div style="font-family:Arial, sans-serif; color:#333;">
        <h2 style="color:#144C22;">üìù BPLO Feedback</h2>
        <p><b>Client Name:</b> ${clientName || "N/A"}</p>
        <p><b>Email:</b> ${emailAddress || "N/A"}</p>
        <p><b>Contact No.:</b> ${contactNo || "N/A"}</p>
        <p><b>Transaction Date:</b> ${transactionDate || "N/A"}</p>
        <p><b>Transaction Time:</b> ${transactionTime || "N/A"}</p>
        <p><b>Employee Name:</b> ${employeeName || "N/A"}</p>
        <p><b>Service Availed:</b> ${serviceAvailed || "N/A"}</p>
        <br/>
        ${ratingsHtml}
        <h4 style="color:#144C22;">Other Comments:</h4>
        <p style="border:1px solid #ccc;padding:10px;background-color:#fafafa;">
          ${comments || "No additional comments."}
        </p>
        <br/>
        <p style="font-size:12px;color:#666;">This feedback email was automatically generated by the Client Feedback Form System.</p>
      </div>
    `;

    // ‚úÖ Send the email asynchronously
    sendEmail(
      "feedback@sanpablocity.gov.ph",
      "New Client Feedback Received",
      htmlContent
    );

    // ‚úÖ Respond immediately to frontend
    res.status(200).json({ message: "Feedback sent successfully" });
  } catch (err) {
    console.error("‚ùå Feedback processing error:", err);
    res.status(500).json({ error: "Failed to send feedback" });
  }
});

module.exports = router;
